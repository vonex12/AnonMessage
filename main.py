import asyncio
import secrets
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = os.getenv("8066163997:AAEDYXXY9L3o3Xn3tgvgjEwpgsz8lkLT1bo")

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# –°–ª–æ–≤–∞—Ä–∏
user_links = {}         # user_id -> token
link_to_user = {}       # token -> user_id
anon_sessions = {}      # sender_id -> recipient_id
active_replies = {}     # recipient_id -> sender_id
link_messages = {}      # user_id -> message_id

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
def generate_token():
    return secrets.token_urlsafe(6)

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def build_link_text_and_markup(user_id: int, bot_username: str):
    token = user_links[user_id]
    link = f"https://t.me/{bot_username}?start={token}"
    text = f"<b>–¢–≤–æ—è —Å—Å—ã–ª–∫–∞:</b>\n\n{link}"
    kb = InlineKeyboardBuilder()
    kb.button(text="üîÅ –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="refresh_link")
    return text, kb.as_markup()

# /start
@dp.message(F.text == "/start")
async def handle_start(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"/start –æ—Ç {user_id}")

    if user_id not in user_links:
        token = generate_token()
        user_links[user_id] = token
        link_to_user[token] = user_id
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ç–æ–∫–µ–Ω {token} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    bot_username = (await bot.get_me()).username
    text, kb = build_link_text_and_markup(user_id, bot_username)

    sent = await message.answer(text, reply_markup=kb)
    link_messages[user_id] = sent.message_id

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
@dp.callback_query(F.data == "refresh_link")
async def refresh_link(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"{user_id} –Ω–∞–∂–∞–ª –æ–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É")

    old_token = user_links.get(user_id)
    if old_token:
        link_to_user.pop(old_token, None)
        logger.info(f"–£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω: {old_token}")

    new_token = generate_token()
    user_links[user_id] = new_token
    link_to_user[new_token] = user_id
    logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω {new_token} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    bot_username = (await bot.get_me()).username
    text, kb = build_link_text_and_markup(user_id, bot_username)

    if user_id in link_messages:
        msg_id = link_messages[user_id]
        try:
            await bot.edit_message_text(
                chat_id=user_id,
                message_id=msg_id,
                text=text,
                reply_markup=kb
            )
        except:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π")

    await callback.answer("–°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

# –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
@dp.message(F.text.startswith("/start "))
async def handle_token_entry(message: types.Message):
    token = message.text.split(" ", 1)[1].strip()
    user_id = message.from_user.id
    logger.info(f"{user_id} –ø–µ—Ä–µ—à—ë–ª –ø–æ —Å—Å—ã–ª–∫–µ —Å —Ç–æ–∫–µ–Ω–æ–º {token}")

    if token in link_to_user:
        recipient_id = link_to_user[token]
        anon_sessions[user_id] = recipient_id
        logger.info(f"{user_id} —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å {recipient_id}")
        await message.answer("–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
        await message.answer("–°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
    sender_id = message.from_user.id

    # –û—Ç–≤–µ—Ç
    if sender_id in active_replies:
        target_id = active_replies.pop(sender_id)
        logger.info(f"{sender_id} –ø–∏—à–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")

        try:
            if message.photo:
                logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è: —Ñ–æ—Ç–æ")
                await bot.send_photo(target_id, message.photo[-1].file_id, caption="üì• –û—Ç–≤–µ—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
            elif message.sticker:
                logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è: —Å—Ç–∏–∫–µ—Ä")
                await bot.send_sticker(target_id, message.sticker.file_id)
            elif message.animation:
                logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è: GIF")
                await bot.send_animation(target_id, message.animation.file_id, caption="üì• –û—Ç–≤–µ—Ç —Å GIF")
            elif message.video_note:
                logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è: –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ")
                await bot.send_video_note(target_id, message.video_note.file_id)
            elif message.video:
                logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è: –≤–∏–¥–µ–æ")
                await bot.send_video(target_id, message.video.file_id, caption="üì• –û—Ç–≤–µ—Ç —Å –≤–∏–¥–µ–æ")
            else:
                logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è: —Ç–µ–∫—Å—Ç")
                await bot.send_message(target_id, f"üì• –û—Ç–≤–µ—Ç:\n\n{message.text}")

            await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.")
        return

    # –ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if sender_id in anon_sessions:
        target_id = anon_sessions.pop(sender_id)
        logger.info(f"{sender_id} –ø–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{sender_id}")]
            ]
        )

        try:
            if message.photo:
                logger.info("–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è: —Ñ–æ—Ç–æ")
                await bot.send_photo(target_id, message.photo[-1].file_id, caption="üì© –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", reply_markup=kb)
            elif message.sticker:
                logger.info("–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è: —Å—Ç–∏–∫–µ—Ä")
                await bot.send_sticker(target_id, message.sticker.file_id, reply_markup=kb)
            elif message.animation:
                logger.info("–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è: GIF")
                await bot.send_animation(target_id, message.animation.file_id, caption="üì© GIF", reply_markup=kb)
            elif message.video_note:
                logger.info("–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è: –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ")
                await bot.send_video_note(target_id, message.video_note.file_id, reply_markup=kb)
            elif message.video:
                logger.info("–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è: –≤–∏–¥–µ–æ")
                await bot.send_video(target_id, message.video.file_id, caption="üì© –í–∏–¥–µ–æ", reply_markup=kb)
            else:
                logger.info("–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è: —Ç–µ–∫—Å—Ç")
                await bot.send_message(target_id, f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n{message.text}", reply_markup=kb)

            active_replies[target_id] = sender_id
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        logger.warning(f"{sender_id} –ø–∏—à–µ—Ç –≤–Ω–µ —Å–µ—Å—Å–∏–∏")
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "‚Ü©Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å"
@dp.callback_query(F.data.startswith("reply_"))
async def handle_reply_button(callback: types.CallbackQuery):
    try:
        sender_id = int(callback.data.split("_")[1])
        active_replies[callback.from_user.id] = sender_id
        logger.info(f"{callback.from_user.id} –Ω–∞–∂–∞–ª –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sender_id}")
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ.")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: {e}")
        await callback.answer("–û—à–∏–±–∫–∞.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    me = await bot.get_me()
    logger.info(f"–ë–æ—Ç: @{me.username} (ID: {me.id})")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
